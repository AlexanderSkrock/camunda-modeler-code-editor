{"version":3,"file":"lib.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACP,EAASQ,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAEV,EAASS,IAC5EE,OAAOC,eAAeZ,EAASS,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBP,IACH,oBAAXoB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeZ,EAASoB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeZ,EAAS,aAAc,CAAEsB,OAAO,GAAO,G,mWCL9D,MAAMC,EAAiB,CACrBC,cAAe,KACfC,QAAS,CAAC,EACVC,UAAW,CAAC,EACZC,MAAO,CAAC,EACRC,eAAgB,CAAC,GAGZ,SAASC,IAId,OAHKC,WAAW,iBACdA,WAAW,eAAiBP,GAEvBO,WAAW,cACpB,CCLO,SAASC,EAAYC,GAC1B,MAAMC,EAJqB,iBADXC,EAKUF,IAJaE,aAAoBC,OAIZH,ECP1C,SAAiBI,GACtB,MAAMC,EC0CD,SAA2BD,GAChC,OAAQA,GAAWA,EAAQC,gBAAmBD,CAChD,CD5CyBE,CAAkBF,GACzC,GAAIC,EAAgB,CAClB,MAAME,EAAaF,EAAeG,YAClC,GAAID,EACF,OAAOA,EAAWE,IAEtB,CACAC,QAAQC,KAAK,sCACf,CDFqEC,CAAQZ,GAL7E,IAAkBE,EAMhB,OAAOL,IAAeH,UAAUO,EAClC,CAEO,SAASY,EAAiBZ,EAAUP,GACzCG,IAAeH,UAAUO,GAAYP,CACvC,CAEO,SAASoB,EAAkBC,GAChCpC,OAAOqC,QAAQD,GAAiBE,SAAQ,EAAGhB,EAAUP,MACnDmB,EAAiBZ,EAAUP,EAAU,GAEzC,CGnBO,SAASwB,EAAUC,GACxB,MAAMC,EAASvB,IACf,OAAOuB,EAAO3B,QAAQ0B,IAAaC,EAAO5B,aAC5C,CAEO,SAAS6B,EAAsB7B,GACpCK,IAAeL,cAAgBA,CACjC,CAEO,SAAS8B,EAAeH,EAAUI,GACvC1B,IAAeJ,QAAQ0B,GAAYI,CACrC,CCVO,SAASC,EAAiBC,GAC/B,OAAO5B,IAAeD,eAAe6B,EACvC,CAEO,SAASC,IACd,MAAO,IACF/C,OAAOgD,OAAO9B,IAAeD,gBAEpC,CAEO,SAASgC,EAAsBH,EAAYI,GAChDhC,IAAeD,eAAe6B,GAAcI,CAC9C,CAEO,SAASC,EAAuBC,GACrCpD,OAAOqC,QAAQe,GAAuBd,SAAQ,EAAGQ,EAAYI,MAC3DD,EAAsBH,EAAYI,EAAS,GAE/C,CCnBO,SAASG,IACd,OAAOrD,OAAOgD,OAAO9B,IAAeF,MACtC,CAEO,SAASsC,EAAgBC,GAC9B,OAAOrC,IAAeF,MAAMuC,EAC9B,CAEO,SAASC,EAAqBC,GACnCvC,IAAeF,MAAMyC,EAAmBF,IAAME,CAChD,CAEO,SAASC,EAAsBC,GACpCA,EAAoBrB,SAAQmB,GAAsBD,EAAqBC,IACzE,C","sources":["webpack://camunda-modeler-code-editor/webpack/universalModuleDefinition","webpack://camunda-modeler-code-editor/webpack/bootstrap","webpack://camunda-modeler-code-editor/webpack/runtime/define property getters","webpack://camunda-modeler-code-editor/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-code-editor/webpack/runtime/make namespace object","webpack://camunda-modeler-code-editor/./lib/config.js","webpack://camunda-modeler-code-editor/./lib/accessors.js","webpack://camunda-modeler-code-editor/./lib/utils.js","webpack://camunda-modeler-code-editor/./node_modules/bpmn-js/lib/util/ModelUtil.js","webpack://camunda-modeler-code-editor/./lib/editors.js","webpack://camunda-modeler-code-editor/./lib/scope.js","webpack://camunda-modeler-code-editor/./lib/types.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const DEFAULT_CONFIG = {\n  defaultEditor: null,\n  editors: {},\n  accessors: {},\n  types: {},\n  scopeProviders: {},\n};\n\nexport function ensureConfig() {\n  if (!globalThis['code-editor']) {\n    globalThis['code-editor'] = DEFAULT_CONFIG;\n  }\n  return globalThis['code-editor'];\n}\n","import { ensureConfig } from './config';\n\nimport { getType } from './utils';\n\nfunction isString(variable) {\n  return typeof variable === 'string' || variable instanceof String;\n}\n\nexport function getAccessor(typeNameOrElement) {\n  const typeName = isString(typeNameOrElement) ? typeNameOrElement : getType(typeNameOrElement);\n  return ensureConfig().accessors[typeName];\n}\n\nexport function registerAccessor(typeName, accessors) {\n  ensureConfig().accessors[typeName] = accessors;\n}\n\nexport function registerAccessors(typeToAccessors) {\n  Object.entries(typeToAccessors).forEach(([ typeName, accessors ]) => {\n    registerAccessor(typeName, accessors);\n  });\n}\n","import { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\n\nexport function getType(element) {\n  const businessObject = getBusinessObject(element);\n  if (businessObject) {\n    const descriptor = businessObject.$descriptor;\n    if (descriptor) {\n      return descriptor.name;\n    }\n  }\n  console.warn('unable to find the model descriptor');\n}\n","import {\n  some\n} from 'min-dash';\n\n/**\n * @typedef { import('../model/Types').Element } Element\n * @typedef { import('../model/Types').ModdleElement } ModdleElement\n */\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {Element|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nexport function is(element, type) {\n  var bo = getBusinessObject(element);\n\n  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n}\n\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {Element|ModdleElement} element\n * @param {string[]} types\n *\n * @return {boolean}\n */\nexport function isAny(element, types) {\n  return some(types, function(t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param {Element|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nexport function getBusinessObject(element) {\n  return (element && element.businessObject) || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param {Element} element\n *\n * @return {ModdleElement}\n */\nexport function getDi(element) {\n  return element && element.di;\n}","import { ensureConfig } from './config';\n\nexport function getEditor(language) {\n  const config = ensureConfig();\n  return config.editors[language] || config.defaultEditor;\n}\n\nexport function registerDefaultEditor(defaultEditor) {\n  ensureConfig().defaultEditor = defaultEditor;\n}\n\nexport function registerEditor(language, editor) {\n  ensureConfig().editors[language] = editor;\n}\n","import { ensureConfig } from './config';\n\n\nexport function getScopeProvider(identifier) {\n  return ensureConfig().scopeProviders[identifier];\n}\n\nexport function getScopeProviders() {\n  return [\n    ...Object.values(ensureConfig().scopeProviders),\n  ];\n}\n\nexport function registerScopeProvider(identifier, provider) {\n  ensureConfig().scopeProviders[identifier] = provider;\n}\n\nexport function registerScopeProviders(identifierToProviders) {\n  Object.entries(identifierToProviders).forEach(([ identifier, provider ]) => {\n    registerScopeProvider(identifier, provider);\n  });\n}\n","import { ensureConfig } from './config';\n\nexport function getEditableTypes() {\n  return Object.values(ensureConfig().types);\n}\n\nexport function getEditableType(id) {\n  return ensureConfig().types[id];\n}\n\nexport function registerEditableType(typeImplementation) {\n  ensureConfig().types[typeImplementation.id] = typeImplementation;\n}\n\nexport function registerEditableTypes(typeImplementations) {\n  typeImplementations.forEach(typeImplementation => registerEditableType(typeImplementation));\n}\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DEFAULT_CONFIG","defaultEditor","editors","accessors","types","scopeProviders","ensureConfig","globalThis","getAccessor","typeNameOrElement","typeName","variable","String","element","businessObject","getBusinessObject","descriptor","$descriptor","name","console","warn","getType","registerAccessor","registerAccessors","typeToAccessors","entries","forEach","getEditor","language","config","registerDefaultEditor","registerEditor","editor","getScopeProvider","identifier","getScopeProviders","values","registerScopeProvider","provider","registerScopeProviders","identifierToProviders","getEditableTypes","getEditableType","id","registerEditableType","typeImplementation","registerEditableTypes","typeImplementations"],"sourceRoot":""}