{"version":3,"file":"lib.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-code-editor/webpack/universalModuleDefinition","webpack://camunda-modeler-code-editor/webpack/bootstrap","webpack://camunda-modeler-code-editor/webpack/runtime/define property getters","webpack://camunda-modeler-code-editor/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-code-editor/webpack/runtime/make namespace object","webpack://camunda-modeler-code-editor/./lib/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const DEFAULT_STATE = {\n  editors: {},\n  default: null\n};\nfunction ensureGlobal() {\n  if (!globalThis['code-editor']) {\n    globalThis['code-editor'] = DEFAULT_STATE;\n  }\n  return globalThis['code-editor'];\n}\nexport const getEditor = language => {\n  const config = ensureGlobal();\n  return config.editors[language] || config.default;\n};\nexport const registerDefaultEditor = defaultEditor => {\n  ensureGlobal().default = defaultEditor;\n};\nexport const registerEditor = (language, editor) => {\n  ensureGlobal().editors[language] = editor;\n};"],"names":[],"sourceRoot":""}