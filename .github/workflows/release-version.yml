name: Release a version

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ref'
        type: string
        default: 'main'
      version:
        description: 'Version'
        type: string
        required: true

jobs:
  create-plugin-artifacts:
    permissions:
      contents: write

    uses: ./.github/workflows/create-plugin-artifacts.yml
    with:
      ref: ${{ inputs.ref }}
      tag: "pre-release-${{ inputs.version }}"
      retention-days: 7
      overwrite: true

  wait-for-approval:
    needs:
      - create-plugin-artifacts

    runs-on: ubuntu-latest

    permissions:
      issues: write

    # Wait at maximium for artifact retention time, 60 * 24 * retention-days
    timeout-minutes: 10080

    steps:
      - id: retrieve-artifacts
        run: |
          ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ needs.create-plugin-artifacts.outputs.run_id }}/artifacts")
          ARTIFACT_LIST=$(echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | "- [\(.name)](\(.archive_download_url))"')
          echo "artifactsList=$ARTIFACT_LIST" >> GITHUB_OUTPUT

      - run: "echo ${{ steps.retrieve-artifacts.outputs.artifactsList }}"
      - run: "echo ${{ join(fromJson(steps.retrieve-artifacts.outputs.artifactsList), '\n') }}"

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: AlexanderSkrock
          issue-title: "Release ${{ inputs.version }}"
          issue-body: |
            Please approve or deny version ${{ inputs.version }}

            Have a look on the following artifacts:
            
            ${{ join(fromJson(steps.retrieve-artifacts.outputs.artifactsList), '\n') }}

  release-version:
    needs:
      - wait-for-approval
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci
      - run: npx nx release version --specifier ${{ inputs.version }}

